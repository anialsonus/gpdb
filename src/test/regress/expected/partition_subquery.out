CREATE SCHEMA partition_subquery;
SET SEARCH_PATH=partition_subquery;
-- Given a partition table
CREATE TABLE pt1(id int) DISTRIBUTED BY (id) PARTITION BY RANGE (id) (DEFAULT PARTITION p1);
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_p1" for table "pt1"
-- When I run a query, outermost query, and it is selecting FROM a subquery
-- And that subquery, subquery 1, contains another subquery, subquery 2
-- And the outermost query aggregates over a column from an inherited table
-- And the subquery 1 is prevented from being pulled up into a join
SELECT id FROM (
	SELECT id, sum(id) OVER() as sum_id FROM (
		SELECT id FROM pt1
	) as sq1
) as sq2 GROUP BY id;
 id 
----
(0 rows)

-- Then, the query executes successfully
--start_ignore
DROP TABLE IF EXISTS pt1;
--end_ignore
-- When a query has a partitioned table and a correlated subquery, it will fail with Query Optimizer
-- We've implemented a fix, and this test is supposed to make sure that this type of queries works correctly
create table t1 (a int) partition by range (a) (start (1) end (3) every (1));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "t1_1_prt_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_2" for table "t1"
create table t2 (b int8) distributed by (b);
explain select 1 from t1 where a <= (
    SELECT 1 FROM t2
    WHERE t2.b <= (SELECT 1 from t2 as t3 where t3.b = t2.b)
    and t1.a = t2.b);
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..19505857080507.50 rows=64200 width=0)
   ->  Result  (cost=0.00..19505857080507.50 rows=21400 width=0)
         ->  Append  (cost=0.00..19505857080507.50 rows=21400 width=0)
               ->  Seq Scan on t1_1_prt_1  (cost=0.00..9752928540253.75 rows=10700 width=0)
                     Filter: (a <= (SubPlan 2))
                     SubPlan 2  (slice5; segments: 3)
                       ->  Result  (cost=0.00..101276516.75 rows=17 width=0)
                             Filter: ((t1_1_prt_1.a = t2.b) AND (t2.b <= (SubPlan 1)))
                             ->  Materialize  (cost=0.00..101276516.75 rows=17 width=0)
                                   ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..101276516.50 rows=17 width=0)
                                         ->  Seq Scan on t2  (cost=0.00..101276516.50 rows=17 width=0)
                             SubPlan 1  (slice5; segments: 3)
                               ->  Result  (cost=0.00..1176.68 rows=29 width=0)
                                     Filter: (t3.b = t2.b)
                                     ->  Materialize  (cost=0.00..1176.68 rows=29 width=0)
                                           ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1176.25 rows=29 width=0)
                                                 ->  Seq Scan on t2 t3  (cost=0.00..1176.25 rows=29 width=0)
               ->  Seq Scan on t1_1_prt_2  (cost=0.00..9752928540253.75 rows=10700 width=0)
                     Filter: (a <= (SubPlan 2))
                     SubPlan 2  (slice5; segments: 3)
                       ->  Result  (cost=0.00..101276516.75 rows=17 width=0)
                             Filter: ((t1_1_prt_2.a = t2_1.b) AND (t2_1.b <= (SubPlan 1)))
                             ->  Materialize  (cost=0.00..101276516.75 rows=17 width=0)
                                   ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..101276516.50 rows=17 width=0)
                                         ->  Seq Scan on t2 t2_1  (cost=0.00..101276516.50 rows=17 width=0)
                             SubPlan 1  (slice5; segments: 3)
                               ->  Result  (cost=0.00..1176.68 rows=29 width=0)
                                     Filter: (t3_1.b = t2_1.b)
                                     ->  Materialize  (cost=0.00..1176.68 rows=29 width=0)
                                           ->  Broadcast Motion 3:3  (slice3; segments: 3)  (cost=0.00..1176.25 rows=29 width=0)
                                                 ->  Seq Scan on t2 t3_1  (cost=0.00..1176.25 rows=29 width=0)
 Optimizer: Postgres query optimizer
(32 rows)

