--
-- Test the query command identification
--
create extension if not exists gp_inject_fault;
set client_min_messages = notice;
select gp_inject_fault('all', 'reset', dbid) from gp_segment_configuration;
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

create or replace function sirv_function() returns text as $$
declare
    result1 text;
    result2 text;
    result3 text;
begin
    create table test_data1 (x int, y int) distributed by (x);
    create table test_data2 (x int, y varchar) distributed by(x);

    execute 'insert into test_data1 values (1,1)';
    execute 'insert into test_data1 values (1,2)';

    execute 'insert into test_data2 values (1, ''one'')';
    execute 'insert into test_data2 values (1, ''ONE'')';

    execute 'select case when count(*)>0 then ''PASS'' else ''FAIL'' end from test_data1' into result1;
    execute 'select case when count(*)>0 then ''PASS'' else ''FAIL'' end from test_data2' into result2;

    execute 'drop table test_data1';
    execute 'drop table test_data2';

    if (result1 = 'PASS')  and  (result2 = 'PASS') then
        result3 = 'PASS';
    else
        result3 = 'FAIL';
    end if;
    return result3;
end $$ language plpgsql volatile;
\c
select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  END ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  START ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  END ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  START ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  END ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

select sirv_function();
NOTICE:  START ExecutorStart | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorStart | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorRun | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 5
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 5
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 6
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 6
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 13
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 13
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 14
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 14
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorFinish | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorFinish | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorEnd | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorEnd | Q: select sirv_function(); | QUERY ID: 4
 sirv_function 
---------------
 PASS
(1 row)

-- Test that the query command id is correct after execution of queries in the InitPlan
create table t as select (select sirv_function()) as res distributed by (res);
NOTICE:  START ProcessUtility | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 16
NOTICE:  START ExecutorStart | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 18
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 18
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 19
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 19
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 20
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 24
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 26
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 26
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 27
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 27
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorRun | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ExecutorRun | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorFinish | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ExecutorFinish | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorEnd | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ExecutorEnd | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  END ProcessUtility | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 16
-- Test a simple query
select * from t;
NOTICE:  START ExecutorStart | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorStart | Q: select * from t; | QUERY ID: 29
NOTICE:  START ExecutorRun | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorRun | Q: select * from t; | QUERY ID: 29
NOTICE:  START ExecutorFinish | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorFinish | Q: select * from t; | QUERY ID: 29
NOTICE:  START ExecutorEnd | Q: select * from t; | QUERY ID: 29
NOTICE:  END ExecutorEnd | Q: select * from t; | QUERY ID: 29
 res  
------
 PASS
(1 row)

drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 31
NOTICE:  END ProcessUtility | Q: drop table t; | QUERY ID: 31
-- Test a cursor
begin;
NOTICE:  START ProcessUtility | Q: begin; | QUERY ID: 33
NOTICE:  END ProcessUtility | Q: begin; | QUERY ID: 33
declare cur1 cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 35
NOTICE:  START ExecutorStart | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorStart | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ProcessUtility | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 35
fetch 1 from cur1;
NOTICE:  START ProcessUtility | Q: fetch 1 from cur1; | QUERY ID: 38
NOTICE:  START ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 39
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 39
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 40
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 40
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 41
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 42
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 45
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 46
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ProcessUtility | Q: fetch 1 from cur1; | QUERY ID: 38
 res  
------
 PASS
(1 row)

fetch all from cur1;
NOTICE:  START ProcessUtility | Q: fetch all from cur1; | QUERY ID: 50
NOTICE:  START ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ProcessUtility | Q: fetch all from cur1; | QUERY ID: 50
 res 
-----
(0 rows)

commit;
NOTICE:  START ProcessUtility | Q: commit; | QUERY ID: 52
NOTICE:  END ProcessUtility | Q: commit; | QUERY ID: 52
NOTICE:  START ExecutorFinish | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorFinish | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  START ExecutorEnd | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
NOTICE:  END ExecutorEnd | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 36
-- Test two cursors
begin;
NOTICE:  START ProcessUtility | Q: begin; | QUERY ID: 54
NOTICE:  END ProcessUtility | Q: begin; | QUERY ID: 54
declare cur1_a cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 56
NOTICE:  START ExecutorStart | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorStart | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 56
fetch 1 from cur1_a;
NOTICE:  START ProcessUtility | Q: fetch 1 from cur1_a; | QUERY ID: 59
NOTICE:  START ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 60
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 60
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 61
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 61
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 62
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 63
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 64
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 66
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 67
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 68
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 68
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 69
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 69
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: fetch 1 from cur1_a; | QUERY ID: 59
 res  
------
 PASS
(1 row)

declare cur2_b cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 71
NOTICE:  START ExecutorStart | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorStart | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ProcessUtility | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 71
fetch 2 from cur2_b;
NOTICE:  START ProcessUtility | Q: fetch 2 from cur2_b; | QUERY ID: 74
NOTICE:  START ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 75
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) distributed by (x) | QUERY ID: 75
CONTEXT:  SQL statement "create table test_data1 (x int, y int) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 76
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) distributed by(x) | QUERY ID: 76
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 77
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 78
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 79
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 80
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1 | QUERY ID: 81
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data1"
PL/pgSQL function sirv_function() line 16 at EXECUTE statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2 | QUERY ID: 82
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end from test_data2"
PL/pgSQL function sirv_function() line 17 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 83
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 83
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at EXECUTE statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 84
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 84
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at EXECUTE statement
NOTICE:  END ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ProcessUtility | Q: fetch 2 from cur2_b; | QUERY ID: 74
 res  
------
 PASS
(1 row)

fetch all from cur2_b;
NOTICE:  START ProcessUtility | Q: fetch all from cur2_b; | QUERY ID: 86
NOTICE:  START ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ProcessUtility | Q: fetch all from cur2_b; | QUERY ID: 86
 res 
-----
(0 rows)

fetch all from cur1_a;
NOTICE:  START ProcessUtility | Q: fetch all from cur1_a; | QUERY ID: 88
NOTICE:  START ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: fetch all from cur1_a; | QUERY ID: 88
 res 
-----
(0 rows)

commit;
NOTICE:  START ProcessUtility | Q: commit; | QUERY ID: 90
NOTICE:  END ProcessUtility | Q: commit; | QUERY ID: 90
NOTICE:  START ExecutorFinish | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorFinish | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  START ExecutorEnd | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  END ExecutorEnd | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 72
NOTICE:  START ExecutorFinish | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorFinish | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  START ExecutorEnd | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
NOTICE:  END ExecutorEnd | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 57
-- Test partitioned tables
create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra);
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 92
NOTICE:  CREATE TABLE will create partition "t_1_prt_extra" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_2" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_3" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_4" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_5" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_6" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_7" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_8" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_9" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_10" for table "t"
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 93
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 93
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 94
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 94
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 95
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 95
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 96
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 96
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 97
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 97
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 98
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 98
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 99
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 99
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 100
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 100
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 101
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 101
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 102
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 102
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 92
alter table t rename to t1;
NOTICE:  START ProcessUtility | Q: alter table t rename to t1; | QUERY ID: 104
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 105
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 105
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 106
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 106
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 107
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 107
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 108
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 108
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 109
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 109
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 110
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 110
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 111
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 111
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 112
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 112
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 113
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 113
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 114
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 114
NOTICE:  END ProcessUtility | Q: alter table t rename to t1; | QUERY ID: 104
alter table t1 rename to t2;
NOTICE:  START ProcessUtility | Q: alter table t1 rename to t2; | QUERY ID: 116
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 117
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 117
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 118
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 118
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 119
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 119
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 120
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 120
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 121
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 121
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 122
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 122
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 123
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 123
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 124
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 124
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 125
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 125
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 126
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 126
NOTICE:  END ProcessUtility | Q: alter table t1 rename to t2; | QUERY ID: 116
drop table t2;
NOTICE:  START ProcessUtility | Q: drop table t2; | QUERY ID: 128
NOTICE:  END ProcessUtility | Q: drop table t2; | QUERY ID: 128
-- Test a function written in sql language, that optimizers cannot inline
create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql;
NOTICE:  START ProcessUtility | Q: create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql; | QUERY ID: 130
NOTICE:  END ProcessUtility | Q: create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql; | QUERY ID: 130
select not_inlineable_sql_func(i) from generate_series(1, 10)i;
NOTICE:  START ExecutorStart | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  END ExecutorStart | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  START ExecutorRun | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 133
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 134
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 135
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 136
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 137
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  START ExecutorFinish | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  END ExecutorFinish | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  START ExecutorEnd | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
NOTICE:  END ExecutorEnd | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 132
 not_inlineable_sql_func 
-------------------------
                       0
                       0
                       0
                       0
                       0
                       1
                       1
                       1
                       1
                       1
(10 rows)

select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 144
NOTICE:  END ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 144
NOTICE:  START ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 144
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- Test the query command ids dispatched to segments
-- start_matchsubs
-- m/select pg_catalog.pg_relation_size\([0-9]+, \'.+\'\)/
-- s/select pg_catalog.pg_relation_size\([0-9]+, \'.+\'\)/select pg_catalog.pg_relation_size\(\)/
-- m/select pg_catalog.gp_acquire_sample_rows\([0-9]+, [0-9]+, \'.+'\)/
-- s/select pg_catalog.gp_acquire_sample_rows\([0-9]+, [0-9]+, \'.+'\)/select pg_catalog.gp_acquire_sample_rows\(\)/
-- m/FROM pg_aoseg.pg_aoseg_[0-9]+/
-- s/FROM pg_aoseg.pg_aoseg_[0-9]+/FROM pg_aoseg.pg_aoseg_OID/
-- end_matchsubs
select gp_inject_fault_infinite('track_query_command_id_at_start', 'skip', dbid) from gp_segment_configuration;
 gp_inject_fault_infinite 
--------------------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

create table t as select 1;
NOTICE:  START ProcessUtility | Q: create table t as select 1; | QUERY ID: 148
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named '?column?' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 149
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 149  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 149  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 149  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 149  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 149  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 149  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 149  (seg1 slice1 127.0.1.1:6003 pid=818842)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17204, 'main') | QUERY ID: 148  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17204, 'main') | QUERY ID: 148  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17204, 'main') | QUERY ID: 148  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17204, 10000, 'f'); | QUERY ID: 148  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17204, 10000, 'f'); | QUERY ID: 148  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17204, 10000, 'f'); | QUERY ID: 148  (seg2 127.0.1.1:6004 pid=818838)
drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 151
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 151  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 151  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 151  (seg0 127.0.1.1:6002 pid=818836)
create table t (i int, j text) with (appendonly = true) distributed by (i);
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 153
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 153  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 153  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 153  (seg2 127.0.1.1:6004 pid=818838)
insert into t select i, (i + 1)::text from generate_series(1, 100) i;
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 155
NOTICE:  START ExecutorStart | Q: SELECT state, segno FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 155  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: SELECT state, segno FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 155  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: SELECT state, segno FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 155  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 155  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 155  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 155  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 155  (seg1 slice1 127.0.1.1:6003 pid=818842)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17207, 'main') | QUERY ID: 155  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17207, 'main') | QUERY ID: 155  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17207, 'main') | QUERY ID: 155  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17207, 10000, 'f'); | QUERY ID: 155  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17207, 10000, 'f'); | QUERY ID: 155  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17207, 10000, 'f'); | QUERY ID: 155  (seg2 127.0.1.1:6004 pid=818838)
vacuum analyze t;
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_17207 WHERE segno = 0 | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_17207 WHERE segno = 0 | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_17207 WHERE segno = 0 | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno, state FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno, state FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno, state FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_17207 | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17207, 'main') | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17207, 'main') | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(17207, 'main') | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17207, 10000, 'f'); | QUERY ID: 157  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17207, 10000, 'f'); | QUERY ID: 157  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(17207, 10000, 'f'); | QUERY ID: 157  (seg2 127.0.1.1:6004 pid=818838)
drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 159
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 159  (seg0 127.0.1.1:6002 pid=818836)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 159  (seg1 127.0.1.1:6003 pid=818837)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 159  (seg2 127.0.1.1:6004 pid=818838)
select gp_inject_fault_infinite('track_query_command_id_at_start', 'reset', dbid) from gp_segment_configuration;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id_at_start', 'reset', dbid) from gp_segment_configuration; | QUERY ID: 161
 gp_inject_fault_infinite 
--------------------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

drop function sirv_function();
drop function not_inlineable_sql_func(i int);
reset client_min_messages;
