--
-- Test the query command identification
--
create extension if not exists gp_inject_fault;
set client_min_messages = notice;
select gp_inject_fault('all', 'reset', dbid) from gp_segment_configuration;
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

create or replace function sirv_function() returns text as $$
declare
    result1 text;
    result2 text;
    result3 text;
begin
    create table test_data1 (x int, y int) with (appendonly=true) distributed by (x);
    create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x);

    insert into test_data1 values (1,1);
    insert into test_data1 values (1,2);

    insert into test_data2 values (1, 'one');
    insert into test_data2 values (1, 'ONE');

    select case when count(*)>0 then 'PASS' else 'FAIL' end into result1 from test_data1;
    select case when count(*)>0 then 'PASS' else 'FAIL' end into result2 from test_data2;

    drop table test_data1;
    drop table test_data2;

    if (result1 = 'PASS')  and  (result2 = 'PASS') then
        result3 = 'PASS';
    else
        result3 = 'FAIL';
    end if;
    return result3;
end $$ language plpgsql volatile;
\c
select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  END ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  START ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  END ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  START ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
NOTICE:  END ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 2
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

select sirv_function();
NOTICE:  START ExecutorStart | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorStart | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorRun | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 5
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 5
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 6
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 6
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 9
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 10
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 13
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 13
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 14
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 14
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  START ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 15
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorFinish | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorFinish | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  START ExecutorEnd | Q: select sirv_function(); | QUERY ID: 4
NOTICE:  END ExecutorEnd | Q: select sirv_function(); | QUERY ID: 4
 sirv_function 
---------------
 PASS
(1 row)

-- Test that the query command id is correct after execution of queries in the InitPlan
create table t as select (select sirv_function()) as res distributed by (res);
NOTICE:  START ProcessUtility | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
NOTICE:  START ExecutorStart | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 19
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 19
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 20
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 20
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 21
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 22
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 23
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 24
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 25
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 26
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 27
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 27
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 28
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 28
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  START ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 29
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  START ExecutorRun | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  END ExecutorRun | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  START ExecutorFinish | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  END ExecutorFinish | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  START ExecutorEnd | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  END ExecutorEnd | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 18
NOTICE:  END ProcessUtility | Q: create table t as select (select sirv_function()) as res distributed by (res); | QUERY ID: 17
-- Test a simple query
select * from t;
NOTICE:  START ExecutorStart | Q: select * from t; | QUERY ID: 31
NOTICE:  END ExecutorStart | Q: select * from t; | QUERY ID: 31
NOTICE:  START ExecutorRun | Q: select * from t; | QUERY ID: 31
NOTICE:  END ExecutorRun | Q: select * from t; | QUERY ID: 31
NOTICE:  START ExecutorFinish | Q: select * from t; | QUERY ID: 31
NOTICE:  END ExecutorFinish | Q: select * from t; | QUERY ID: 31
NOTICE:  START ExecutorEnd | Q: select * from t; | QUERY ID: 31
NOTICE:  END ExecutorEnd | Q: select * from t; | QUERY ID: 31
 res  
------
 PASS
(1 row)

drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 33
NOTICE:  END ProcessUtility | Q: drop table t; | QUERY ID: 33
-- Test a cursor
begin;
NOTICE:  START ProcessUtility | Q: begin; | QUERY ID: 35
NOTICE:  END ProcessUtility | Q: begin; | QUERY ID: 35
declare cur1 cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 37
NOTICE:  START ExecutorStart | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ExecutorStart | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ProcessUtility | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 37
fetch 1 from cur1;
NOTICE:  START ProcessUtility | Q: fetch 1 from cur1; | QUERY ID: 40
NOTICE:  START ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 41
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 41
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 42
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 42
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 43
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 44
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 45
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 46
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 47
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 48
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 49
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 49
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 50
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 50
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  START ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 51
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ProcessUtility | Q: fetch 1 from cur1; | QUERY ID: 40
 res  
------
 PASS
(1 row)

fetch all from cur1;
NOTICE:  START ProcessUtility | Q: fetch all from cur1; | QUERY ID: 53
NOTICE:  START ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ExecutorRun | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ProcessUtility | Q: fetch all from cur1; | QUERY ID: 53
 res 
-----
(0 rows)

commit;
NOTICE:  START ProcessUtility | Q: commit; | QUERY ID: 55
NOTICE:  END ProcessUtility | Q: commit; | QUERY ID: 55
NOTICE:  START ExecutorFinish | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ExecutorFinish | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  START ExecutorEnd | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
NOTICE:  END ExecutorEnd | Q: declare cur1 cursor for select sirv_function() as res; | QUERY ID: 38
-- Test two cursors
begin;
NOTICE:  START ProcessUtility | Q: begin; | QUERY ID: 57
NOTICE:  END ProcessUtility | Q: begin; | QUERY ID: 57
declare cur1_a cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 59
NOTICE:  START ExecutorStart | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ExecutorStart | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ProcessUtility | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 59
fetch 1 from cur1_a;
NOTICE:  START ProcessUtility | Q: fetch 1 from cur1_a; | QUERY ID: 62
NOTICE:  START ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 63
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 63
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 64
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 64
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 65
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 66
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 67
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 68
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 69
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 70
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 71
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 71
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 72
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 72
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  START ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 73
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ProcessUtility | Q: fetch 1 from cur1_a; | QUERY ID: 62
 res  
------
 PASS
(1 row)

declare cur2_b cursor for select sirv_function() as res;
NOTICE:  START ProcessUtility | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 75
NOTICE:  START ExecutorStart | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ExecutorStart | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ProcessUtility | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 75
fetch 2 from cur2_b;
NOTICE:  START ProcessUtility | Q: fetch 2 from cur2_b; | QUERY ID: 78
NOTICE:  START ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 79
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 79
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 80
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 80
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 81
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 82
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 83
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 84
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 85
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 86
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 87
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 87
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 88
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 88
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  START ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 89
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ProcessUtility | Q: fetch 2 from cur2_b; | QUERY ID: 78
 res  
------
 PASS
(1 row)

fetch all from cur2_b;
NOTICE:  START ProcessUtility | Q: fetch all from cur2_b; | QUERY ID: 91
NOTICE:  START ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ExecutorRun | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ProcessUtility | Q: fetch all from cur2_b; | QUERY ID: 91
 res 
-----
(0 rows)

fetch all from cur1_a;
NOTICE:  START ProcessUtility | Q: fetch all from cur1_a; | QUERY ID: 93
NOTICE:  START ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ExecutorRun | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ProcessUtility | Q: fetch all from cur1_a; | QUERY ID: 93
 res 
-----
(0 rows)

commit;
NOTICE:  START ProcessUtility | Q: commit; | QUERY ID: 95
NOTICE:  END ProcessUtility | Q: commit; | QUERY ID: 95
NOTICE:  START ExecutorFinish | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ExecutorFinish | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  START ExecutorEnd | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  END ExecutorEnd | Q: declare cur2_b cursor for select sirv_function() as res; | QUERY ID: 76
NOTICE:  START ExecutorFinish | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ExecutorFinish | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  START ExecutorEnd | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
NOTICE:  END ExecutorEnd | Q: declare cur1_a cursor for select sirv_function() as res; | QUERY ID: 60
-- Test partitioned tables
create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra);
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 97
NOTICE:  CREATE TABLE will create partition "t_1_prt_extra" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_2" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_3" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_4" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_5" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_6" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_7" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_8" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_9" for table "t"
NOTICE:  CREATE TABLE will create partition "t_1_prt_10" for table "t"
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 98
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 98
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 99
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 99
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 100
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 100
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 101
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 101
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 102
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 102
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 103
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 103
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 104
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 104
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 105
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 105
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 106
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 106
NOTICE:  START ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 107
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 107
NOTICE:  END ProcessUtility | Q: create table t(i int) distributed by (i)
partition by range (i) (start (1) end (10) every (1), default partition extra); | QUERY ID: 97
alter table t rename to t1;
NOTICE:  START ProcessUtility | Q: alter table t rename to t1; | QUERY ID: 109
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 110
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 110
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 111
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 111
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 112
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 112
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 113
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 113
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 114
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 114
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 115
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 115
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 116
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 116
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 117
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 117
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 118
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 118
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 119
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 119
NOTICE:  END ProcessUtility | Q: alter table t rename to t1; | QUERY ID: 109
alter table t1 rename to t2;
NOTICE:  START ProcessUtility | Q: alter table t1 rename to t2; | QUERY ID: 121
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 122
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 122
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 123
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 123
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 124
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 124
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 125
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 125
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 126
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 126
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 127
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 127
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 128
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 128
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 129
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 129
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 130
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 130
NOTICE:  START ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 131
NOTICE:  END ProcessUtility | Q: (internally generated SQL command) | QUERY ID: 131
NOTICE:  END ProcessUtility | Q: alter table t1 rename to t2; | QUERY ID: 121
drop table t2;
NOTICE:  START ProcessUtility | Q: drop table t2; | QUERY ID: 133
NOTICE:  END ProcessUtility | Q: drop table t2; | QUERY ID: 133
-- Test a function written in sql language, that optimizers cannot inline
create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql;
NOTICE:  START ProcessUtility | Q: create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql; | QUERY ID: 135
NOTICE:  END ProcessUtility | Q: create or replace function not_inlineable_sql_func(i int) returns int 
immutable
security definer
as $$
select case when i > 5 then 1 else 0 end;
$$ language sql; | QUERY ID: 135
select not_inlineable_sql_func(i) from generate_series(1, 10)i;
NOTICE:  START ExecutorStart | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  END ExecutorStart | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  START ExecutorRun | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 138
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 139
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 140
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 141
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 142
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 143
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 144
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 145
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 146
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorStart | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorFinish | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  START ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorEnd | Q: 
select case when i > 5 then 1 else 0 end;
 | QUERY ID: 147
CONTEXT:  SQL function "not_inlineable_sql_func" statement 1
NOTICE:  END ExecutorRun | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  START ExecutorFinish | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  END ExecutorFinish | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  START ExecutorEnd | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
NOTICE:  END ExecutorEnd | Q: select not_inlineable_sql_func(i) from generate_series(1, 10)i; | QUERY ID: 137
 not_inlineable_sql_func 
-------------------------
                       0
                       0
                       0
                       0
                       0
                       1
                       1
                       1
                       1
                       1
(10 rows)

select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 149
NOTICE:  END ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 149
NOTICE:  START ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 149
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- Test the query command ids dispatched to segments
-- start_matchsubs
-- m/select pg_catalog.pg_relation_size\([0-9]+, \'.+\'\)/
-- s/select pg_catalog.pg_relation_size\([0-9]+, \'.+\'\)/select pg_catalog.pg_relation_size\(\)/
-- m/select pg_catalog.gp_acquire_sample_rows\([0-9]+, [0-9]+, \'.+'\)/
-- s/select pg_catalog.gp_acquire_sample_rows\([0-9]+, [0-9]+, \'.+'\)/select pg_catalog.gp_acquire_sample_rows\(\)/
-- m/FROM pg_aoseg.pg_aoseg_[0-9]+/
-- s/FROM pg_aoseg.pg_aoseg_[0-9]+/FROM pg_aoseg.pg_aoseg_OID/
-- end_matchsubs
select gp_inject_fault_infinite('track_query_command_id_at_start', 'skip', dbid) from gp_segment_configuration;
 gp_inject_fault_infinite 
--------------------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

create table t as select 1;
NOTICE:  START ProcessUtility | Q: create table t as select 1; | QUERY ID: 153
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 154  (seg0 127.0.1.1:6002 pid=403017)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 154  (seg1 127.0.1.1:6003 pid=403018)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_highest_oid() | QUERY ID: 154  (seg2 127.0.1.1:6004 pid=403019)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154  (seg0 slice1 127.0.1.1:6002 pid=403060)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154  (seg2 slice1 127.0.1.1:6004 pid=403061)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154  (seg0 127.0.1.1:6002 pid=403017)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154  (seg2 127.0.1.1:6004 pid=403019)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154  (seg1 127.0.1.1:6003 pid=403018)
NOTICE:  START ExecutorStart | Q: create table t as select 1; | QUERY ID: 154  (seg1 slice1 127.0.1.1:6003 pid=403051)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16490, 'main') | QUERY ID: 153  (seg0 127.0.1.1:6002 pid=403017)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16490, 'main') | QUERY ID: 153  (seg1 127.0.1.1:6003 pid=403018)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16490, 'main') | QUERY ID: 153  (seg2 127.0.1.1:6004 pid=403019)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16490, 10000, 'f'); | QUERY ID: 153  (seg0 127.0.1.1:6002 pid=403017)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16490, 10000, 'f'); | QUERY ID: 153  (seg1 127.0.1.1:6003 pid=403018)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16490, 10000, 'f'); | QUERY ID: 153  (seg2 127.0.1.1:6004 pid=403019)
drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 156
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 156  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 156  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 156  (seg2 127.0.1.1:6004 pid=314507)
create table t (i int, j text) with (appendonly = true) distributed by (i);
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 158
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 158  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 158  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: create table t (i int, j text) with (appendonly = true) distributed by (i); | QUERY ID: 158  (seg2 127.0.1.1:6004 pid=314507)
insert into t select i, (i + 1)::text from generate_series(1, 100) i;
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 160
NOTICE:  START ExecutorStart | Q: SELECT state, segno FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 160  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: SELECT state, segno FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 160  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: SELECT state, segno FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 160  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 160  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 160  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: insert into t select i, (i + 1)::text from generate_series(1, 100) i; | QUERY ID: 160  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16612, 'main') | QUERY ID: 160  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16612, 'main') | QUERY ID: 160  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16612, 'main') | QUERY ID: 160  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16612, 10000, 'f'); | QUERY ID: 160  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16612, 10000, 'f'); | QUERY ID: 160  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16612, 10000, 'f'); | QUERY ID: 160  (seg2 127.0.1.1:6004 pid=314507)
vacuum analyze t;
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_16612 WHERE segno = 0 | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_16612 WHERE segno = 0 | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_16612 WHERE segno = 0 | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno, state FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno, state FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno, state FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: SELECT tupcount, segno FROM pg_aoseg.pg_aoseg_16612 | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ProcessUtility | Q: vacuum analyze t; | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16612, 'main') | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16612, 'main') | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: select pg_catalog.pg_relation_size(16612, 'main') | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16612, 10000, 'f'); | QUERY ID: 162  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16612, 10000, 'f'); | QUERY ID: 162  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ExecutorStart | Q: select pg_catalog.gp_acquire_sample_rows(16612, 10000, 'f'); | QUERY ID: 162  (seg1 127.0.1.1:6003 pid=314508)
drop table t;
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 164
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 164  (seg0 127.0.1.1:6002 pid=314506)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 164  (seg2 127.0.1.1:6004 pid=314507)
NOTICE:  START ProcessUtility | Q: drop table t; | QUERY ID: 164  (seg1 127.0.1.1:6003 pid=314508)
select gp_inject_fault_infinite('track_query_command_id_at_start', 'reset', dbid) from gp_segment_configuration;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id_at_start', 'reset', dbid) from gp_segment_configuration; | QUERY ID: 166
 gp_inject_fault_infinite 
--------------------------
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
 Success:
(8 rows)

-- Test the query command id after an error has happened
select gp_inject_fault('appendonly_insert', 'panic', '', '', 'test_data1', 1, -1, 0, dbid) from gp_segment_configuration
where role = 'p';
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
 Success:
(4 rows)

select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  END ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 170
NOTICE:  START ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 170
NOTICE:  END ExecutorFinish | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 170
NOTICE:  START ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 170
NOTICE:  END ExecutorEnd | Q: select gp_inject_fault_infinite('track_query_command_id', 'skip', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 170
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- First query will fail with an error due to insert inside the function
select sirv_function();
NOTICE:  START ExecutorStart | Q: select sirv_function(); | QUERY ID: 172
NOTICE:  END ExecutorStart | Q: select sirv_function(); | QUERY ID: 172
NOTICE:  START ExecutorRun | Q: select sirv_function(); | QUERY ID: 172
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 173
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 173
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 174
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 174
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 175
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 175
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 175
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 175
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 175
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: select sirv_function(); | QUERY ID: 175
ERROR:  fault triggered, fault name:'appendonly_insert' fault type:'panic'  (seg1 127.0.1.1:6003 pid=23756)
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
select sirv_function();
NOTICE:  START ExecutorStart | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  END ExecutorStart | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  START ExecutorRun | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  START ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 3
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data1 (x int, y int) with (appendonly=true) distributed by (x) | QUERY ID: 3
CONTEXT:  SQL statement "create table test_data1 (x int, y int) with (appendonly=true) distributed by (x)"
PL/pgSQL function sirv_function() line 7 at SQL statement
NOTICE:  START ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 4
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  END ProcessUtility | Q: create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x) | QUERY ID: 4
CONTEXT:  SQL statement "create table test_data2 (x int, y varchar) with (appendonly=true) distributed by(x)"
PL/pgSQL function sirv_function() line 8 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,1) | QUERY ID: 5
CONTEXT:  SQL statement "insert into test_data1 values (1,1)"
PL/pgSQL function sirv_function() line 10 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data1 values (1,2) | QUERY ID: 6
CONTEXT:  SQL statement "insert into test_data1 values (1,2)"
PL/pgSQL function sirv_function() line 11 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'one') | QUERY ID: 7
CONTEXT:  SQL statement "insert into test_data2 values (1, 'one')"
PL/pgSQL function sirv_function() line 13 at SQL statement
NOTICE:  START ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorStart | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorRun | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorFinish | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  END ExecutorEnd | Q: insert into test_data2 values (1, 'ONE') | QUERY ID: 8
CONTEXT:  SQL statement "insert into test_data2 values (1, 'ONE')"
PL/pgSQL function sirv_function() line 14 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1 | QUERY ID: 9
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data1"
PL/pgSQL function sirv_function() line 16 at SQL statement
NOTICE:  START ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorStart | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorRun | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorFinish | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  END ExecutorEnd | Q: select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2 | QUERY ID: 10
CONTEXT:  SQL statement "select case when count(*)>0 then 'PASS' else 'FAIL' end              from test_data2"
PL/pgSQL function sirv_function() line 17 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data1 | QUERY ID: 11
CONTEXT:  SQL statement "drop table test_data1"
PL/pgSQL function sirv_function() line 19 at SQL statement
NOTICE:  START ProcessUtility | Q: drop table test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  END ProcessUtility | Q: drop table test_data2 | QUERY ID: 12
CONTEXT:  SQL statement "drop table test_data2"
PL/pgSQL function sirv_function() line 20 at SQL statement
NOTICE:  START ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorStart | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorFinish | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  START ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorEnd | Q: SELECT 'PASS' | QUERY ID: 13
CONTEXT:  SQL statement "SELECT 'PASS'"
PL/pgSQL function sirv_function() line 23 at assignment
NOTICE:  END ExecutorRun | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  START ExecutorFinish | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  END ExecutorFinish | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  START ExecutorEnd | Q: select sirv_function(); | QUERY ID: 2
NOTICE:  END ExecutorEnd | Q: select sirv_function(); | QUERY ID: 2
 sirv_function 
---------------
 PASS
(1 row)

select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1;
NOTICE:  START ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 15
NOTICE:  END ExecutorStart | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 15
NOTICE:  START ExecutorRun | Q: select gp_inject_fault_infinite('track_query_command_id', 'reset', dbid) from gp_segment_configuration
where role = 'p' and content = -1; | QUERY ID: 15
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

select gp_inject_fault('appendonly_insert', 'reset', '', '', 'test_data1', 1, -1, 0, dbid) from gp_segment_configuration
where role = 'p';
 gp_inject_fault 
-----------------
 Success:
 Success:
 Success:
 Success:
(4 rows)

drop function sirv_function();
drop function not_inlineable_sql_func(i int);
reset client_min_messages;
