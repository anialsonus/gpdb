-- This test is to verify the order of reusing idle gangs.
--
-- For example:
-- In the same session,
-- query 1 has 3 slices and it creates gang B, gang C and gang D.
-- query 2 has 2 slices, we hope it reuses gang B and gang C instead of other
-- cases like gang D and gang C.
--
-- In this way, the two queries can have the same send-receive port pair. It's
-- useful in platform like Azure. Because Azure limits the number of different
-- send-receive port pairs (AKA flow) in a certain time period.
-- To verify the order we show the gang id in EXPLAIN ANALYZE output when
-- gp_log_gang is 'debug', turn on this output.
set gp_log_gang to 'debug';
set gp_cached_segworkers_threshold to 10;
set gp_vmem_idle_resource_timeout to '60s';
set optimizer_enable_motion_broadcast to off;
set optimizer_force_multistage_agg to on;
create table test_gang_reuse_t1 (c1 int, c2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- this query will create 3 reader gangs with ids C, D and E, we expect they
-- will always be reused in the same order
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
  join test_gang_reuse_t1 c using (c2)
;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1293.00 rows=1 width=8) (actual time=9.986..9.987 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice4; gang0; segments: 3)  (cost=0.00..1293.00 rows=1 width=8) (actual time=9.364..9.919 rows=3 loops=1)
         ->  Aggregate  (cost=0.00..1293.00 rows=1 width=8) (actual time=8.055..8.056 rows=1 loops=1)
               ->  Hash Join  (cost=0.00..1293.00 rows=1 width=1) (actual time=0.000..8.561 rows=0 loops=1)
                     Hash Cond: (test_gang_reuse_t1.c2 = test_gang_reuse_t1_1.c2)
                     ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (never executed)
                           Hash Key: test_gang_reuse_t1.c2
                           ->  Seq Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.002 rows=0 loops=1)
                     ->  Hash  (cost=862.00..862.00 rows=1 width=4) (actual time=0.000..3.516 rows=0 loops=1)
                           ->  Hash Join  (cost=0.00..862.00 rows=1 width=4) (actual time=0.000..3.510 rows=0 loops=1)
                                 Hash Cond: (test_gang_reuse_t1_1.c2 = test_gang_reuse_t1_2.c2)
                                 ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (never executed)
                                       Hash Key: test_gang_reuse_t1_1.c2
                                       ->  Seq Scan on test_gang_reuse_t1 test_gang_reuse_t1_1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.002 rows=0 loops=1)
                                 ->  Hash  (cost=431.00..431.00 rows=1 width=4) (actual time=0.000..0.038 rows=0 loops=1)
                                       ->  Redistribute Motion 3:3  (slice3; gang9; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.033 rows=0 loops=1)
                                             Hash Key: test_gang_reuse_t1_2.c2
                                             ->  Seq Scan on test_gang_reuse_t1 test_gang_reuse_t1_2  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.003 rows=0 loops=1)
 Planning time: 114.262 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice2)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice3)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice4)    Executor memory: 4192K bytes avg x 3 workers, 4192K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 38.315 ms
(27 rows)

-- so in this query the gangs C and D should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..862.00 rows=1 width=8) (actual time=10.983..10.984 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice3; gang0; segments: 3)  (cost=0.00..862.00 rows=1 width=8) (actual time=8.741..10.949 rows=3 loops=1)
         ->  Aggregate  (cost=0.00..862.00 rows=1 width=8) (actual time=8.000..8.001 rows=1 loops=1)
               ->  Hash Join  (cost=0.00..862.00 rows=1 width=1) (actual time=0.000..9.612 rows=0 loops=1)
                     Hash Cond: (test_gang_reuse_t1.c2 = test_gang_reuse_t1_1.c2)
                     ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (never executed)
                           Hash Key: test_gang_reuse_t1.c2
                           ->  Seq Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.003 rows=0 loops=1)
                     ->  Hash  (cost=431.00..431.00 rows=1 width=4) (actual time=0.000..0.035 rows=0 loops=1)
                           ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.030 rows=0 loops=1)
                                 Hash Key: test_gang_reuse_t1_1.c2
                                 ->  Seq Scan on test_gang_reuse_t1 test_gang_reuse_t1_1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.001 rows=0 loops=1)
 Planning time: 26.781 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice2)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice3)    Executor memory: 4176K bytes avg x 3 workers, 4176K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 13.170 ms
(20 rows)

-- so in this query the gangs C, D and E should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
  join test_gang_reuse_t1 c using (c2)
;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1293.00 rows=1 width=8) (actual time=10.256..10.256 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice4; gang0; segments: 3)  (cost=0.00..1293.00 rows=1 width=8) (actual time=8.163..10.207 rows=3 loops=1)
         ->  Aggregate  (cost=0.00..1293.00 rows=1 width=8) (actual time=9.514..9.515 rows=1 loops=1)
               ->  Hash Join  (cost=0.00..1293.00 rows=1 width=1) (actual time=0.000..9.516 rows=0 loops=1)
                     Hash Cond: (test_gang_reuse_t1.c2 = test_gang_reuse_t1_1.c2)
                     ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (never executed)
                           Hash Key: test_gang_reuse_t1.c2
                           ->  Seq Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.003 rows=0 loops=1)
                     ->  Hash  (cost=862.00..862.00 rows=1 width=4) (actual time=0.000..4.456 rows=0 loops=1)
                           ->  Hash Join  (cost=0.00..862.00 rows=1 width=4) (actual time=0.000..4.449 rows=0 loops=1)
                                 Hash Cond: (test_gang_reuse_t1_1.c2 = test_gang_reuse_t1_2.c2)
                                 ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (never executed)
                                       Hash Key: test_gang_reuse_t1_1.c2
                                       ->  Seq Scan on test_gang_reuse_t1 test_gang_reuse_t1_1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.002 rows=0 loops=1)
                                 ->  Hash  (cost=431.00..431.00 rows=1 width=4) (actual time=0.000..0.025 rows=0 loops=1)
                                       ->  Redistribute Motion 3:3  (slice3; gang9; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.023 rows=0 loops=1)
                                             Hash Key: test_gang_reuse_t1_2.c2
                                             ->  Seq Scan on test_gang_reuse_t1 test_gang_reuse_t1_2  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.002 rows=0 loops=1)
 Planning time: 81.473 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice2)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice3)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice4)    Executor memory: 4192K bytes avg x 3 workers, 4192K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 12.490 ms
(27 rows)

-- so in this query the gangs C and D should be used
explain analyze select count(*) from test_gang_reuse_t1 a
  join test_gang_reuse_t1 b using (c2)
;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..862.00 rows=1 width=8) (actual time=8.860..8.860 rows=1 loops=1)
   ->  Gather Motion 3:1  (slice3; gang0; segments: 3)  (cost=0.00..862.00 rows=1 width=8) (actual time=8.825..8.834 rows=3 loops=1)
         ->  Aggregate  (cost=0.00..862.00 rows=1 width=8) (actual time=7.850..7.851 rows=1 loops=1)
               ->  Hash Join  (cost=0.00..862.00 rows=1 width=1) (actual time=0.000..8.591 rows=0 loops=1)
                     Hash Cond: (test_gang_reuse_t1.c2 = test_gang_reuse_t1_1.c2)
                     ->  Redistribute Motion 3:3  (slice1; gang3; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (never executed)
                           Hash Key: test_gang_reuse_t1.c2
                           ->  Seq Scan on test_gang_reuse_t1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.002 rows=0 loops=1)
                     ->  Hash  (cost=431.00..431.00 rows=1 width=4) (actual time=0.000..0.702 rows=0 loops=1)
                           ->  Redistribute Motion 3:3  (slice2; gang6; segments: 3)  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.696 rows=0 loops=1)
                                 Hash Key: test_gang_reuse_t1_1.c2
                                 ->  Seq Scan on test_gang_reuse_t1 test_gang_reuse_t1_1  (cost=0.00..431.00 rows=1 width=4) (actual time=0.000..0.006 rows=0 loops=1)
 Planning time: 20.957 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice2)    Executor memory: 44K bytes avg x 3 workers, 44K bytes max (seg0).
   (slice3)    Executor memory: 4176K bytes avg x 3 workers, 4176K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 11.176 ms
(20 rows)

reset optimizer_force_multistage_agg;
