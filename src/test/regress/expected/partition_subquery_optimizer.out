CREATE SCHEMA partition_subquery;
SET SEARCH_PATH=partition_subquery;
-- Given a partition table
CREATE TABLE pt1(id int) DISTRIBUTED BY (id) PARTITION BY RANGE (id) (DEFAULT PARTITION p1);
NOTICE:  CREATE TABLE will create partition "pt1_1_prt_p1" for table "pt1"
-- When I run a query, outermost query, and it is selecting FROM a subquery
-- And that subquery, subquery 1, contains another subquery, subquery 2
-- And the outermost query aggregates over a column from an inherited table
-- And the subquery 1 is prevented from being pulled up into a join
SELECT id FROM (
	SELECT id, sum(id) OVER() as sum_id FROM (
		SELECT id FROM pt1
	) as sq1
) as sq2 GROUP BY id;
 id 
----
(0 rows)

-- Then, the query executes successfully
--start_ignore
DROP TABLE IF EXISTS pt1;
--end_ignore
-- When a query has a partitioned table and a correlated subquery, it will fail with Query Optimizer
-- We've implemented a fix, and this test is supposed to make sure that this type of queries works correctly
create table t1 (a int) partition by range (a) (start (1) end (3) every (1));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "t1_1_prt_1" for table "t1"
NOTICE:  CREATE TABLE will create partition "t1_1_prt_2" for table "t1"
create table t2 (b int8) distributed by (b);
explain select 1 from t1 where a <= (
    SELECT 1 FROM t2
    WHERE t2.b <= (SELECT 1 from t2 as t3 where t3.b = t2.b)
    and t1.a = t2.b);
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..1356692096.42 rows=1 width=4)
   ->  Result  (cost=0.00..1356692096.42 rows=1 width=1)
         Filter: (t1.a <= (SubPlan 2))
         ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
               ->  Sequence  (cost=0.00..431.00 rows=1 width=4)
                     ->  Partition Selector for t1 (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                           Partitions selected: 2 (out of 2)
                     ->  Dynamic Seq Scan on t1 (dynamic scan id: 1)  (cost=0.00..431.00 rows=1 width=4)
         SubPlan 2  (slice0)
           ->  Result  (cost=0.00..1324032.63 rows=1 width=4)
                 ->  Result  (cost=0.00..1324032.63 rows=1 width=1)
                       Filter: (t1.a = t2.b)
                       ->  Materialize  (cost=0.00..1324032.63 rows=1 width=8)
                             ->  Result  (cost=0.00..1324032.62 rows=1 width=8)
                                   Filter: (t2.b <= (SubPlan 1))
                                   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                         ->  Seq Scan on t2  (cost=0.00..431.00 rows=1 width=8)
                                   SubPlan 1  (slice0)
                                     ->  Result  (cost=0.00..431.00 rows=1 width=4)
                                           ->  Result  (cost=0.00..431.00 rows=1 width=1)
                                                 Filter: (t2_1.b = t2.b)
                                                 ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                       ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                             ->  Seq Scan on t2 t2_1  (cost=0.00..431.00 rows=1 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

