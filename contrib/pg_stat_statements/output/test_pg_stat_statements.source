CREATE TABLE t(a int, b text) DISTRIBUTED BY (a);
-- Known issue: query is not added to pg_stat_statements statistics in
-- case it is planned by GPORCA. So disable GPORCA during tests.
SET optimizer='off';
SELECT pg_stat_statements_reset();
 pg_stat_statements_reset 
--------------------------
 
(1 row)

SELECT GROUPING (a) FROM t GROUP BY ROLLUP(a, b);
 grouping 
----------
(0 rows)

-- launch not equivalent query
SELECT GROUPING (b) FROM t GROUP BY ROLLUP(a, b);
 grouping 
----------
(0 rows)

-- check that 2 queries have separate entries
SELECT query, calls FROM pg_stat_statements ORDER BY query;
                       query                       | calls 
---------------------------------------------------+-------
 SELECT GROUPING (a) FROM t GROUP BY ROLLUP(a, b); |     1
 SELECT GROUPING (b) FROM t GROUP BY ROLLUP(a, b); |     1
 SELECT pg_stat_statements_reset();                |     1
(3 rows)

-- check that different grouping options result in separate entries
SELECT COUNT (*) FROM t GROUP BY ROLLUP(a, b);
 count 
-------
(0 rows)

SELECT COUNT (*) FROM t GROUP BY CUBE(a, b);
 count 
-------
(0 rows)

SELECT COUNT (*) FROM t GROUP BY GROUPING SETS(a, b);
 count 
-------
(0 rows)

SELECT COUNT (*) FROM t GROUP BY GROUPING SETS((a), (a, b));
 count 
-------
(0 rows)

SELECT COUNT (*) FROM t GROUP BY a, b;
 count 
-------
(0 rows)

SELECT query, calls FROM pg_stat_statements ORDER BY query;
                            query                             | calls 
--------------------------------------------------------------+-------
 SELECT COUNT (*) FROM t GROUP BY a, b;                       |     1
 SELECT COUNT (*) FROM t GROUP BY CUBE(a, b);                 |     1
 SELECT COUNT (*) FROM t GROUP BY GROUPING SETS((a), (a, b)); |     1
 SELECT COUNT (*) FROM t GROUP BY GROUPING SETS(a, b);        |     1
 SELECT COUNT (*) FROM t GROUP BY ROLLUP(a, b);               |     1
 SELECT GROUPING (a) FROM t GROUP BY ROLLUP(a, b);            |     1
 SELECT GROUPING (b) FROM t GROUP BY ROLLUP(a, b);            |     1
 SELECT pg_stat_statements_reset();                           |     1
 SELECT query, calls FROM pg_stat_statements ORDER BY query;  |     1
(9 rows)

-- check several parameters options in ROLLUP
-- all should result in separate entries
SELECT pg_stat_statements_reset();
 pg_stat_statements_reset 
--------------------------
 
(1 row)

SELECT COUNT (*) FROM t GROUP BY ROLLUP(a, b);
 count 
-------
(0 rows)

SELECT COUNT (*) FROM t GROUP BY ROLLUP(b);
 count 
-------
(0 rows)

SELECT query, calls FROM pg_stat_statements ORDER BY query;
                     query                      | calls 
------------------------------------------------+-------
 SELECT COUNT (*) FROM t GROUP BY ROLLUP(a, b); |     1
 SELECT COUNT (*) FROM t GROUP BY ROLLUP(b);    |     1
 SELECT pg_stat_statements_reset();             |     1
(3 rows)

-- check group_id() in query
SELECT group_id() AS c FROM t GROUP BY GROUPING SETS ((a), (a,b));
 c 
---
(0 rows)

-- check anytable parameter for a function
CREATE FUNCTION multiset_1(a anytable) RETURNS TABLE(a int, b text)
    AS '@abs_srcdir@/../../src/test/regress/regress.so', 'multiset_example' LANGUAGE C READS SQL DATA;
CREATE FUNCTION multiset_2(a anytable) RETURNS TABLE(a int, b text)
    AS '@abs_srcdir@/../../src/test/regress/regress.so', 'multiset_example' LANGUAGE C READS SQL DATA;
SELECT pg_stat_statements_reset();
 pg_stat_statements_reset 
--------------------------
 
(1 row)

SELECT * FROM multiset_1(TABLE(SELECT * FROM t));
 a | b 
---+---
(0 rows)

SELECT * FROM multiset_1(TABLE(SELECT * FROM t WHERE a=0));
 a | b 
---+---
(0 rows)

SELECT * FROM multiset_2(TABLE(SELECT * FROM t));
 a | b 
---+---
(0 rows)

SELECT query, calls FROM pg_stat_statements ORDER BY query;
                            query                            | calls 
-------------------------------------------------------------+-------
 SELECT * FROM multiset_1(TABLE(SELECT * FROM t));           |     1
 SELECT * FROM multiset_1(TABLE(SELECT * FROM t WHERE a=?)); |     1
 SELECT * FROM multiset_2(TABLE(SELECT * FROM t));           |     1
 SELECT pg_stat_statements_reset();                          |     1
(4 rows)

RESET optimizer;
DROP TABLE t;
